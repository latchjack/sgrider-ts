{"version":3,"sources":["src/models/User.ts","src/index.ts"],"names":[],"mappings":";;;;;;ACAA,IAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;ADSA,IAAA,IAAA;ACPA,ADOA,ICPM,IAAI,GAAG,IAAI,MAAA,CAAA,IAAJ,CAAS;ADOtB,ECPwB,IAAI,EAAE,IDO9B,ECPsB;EAAgB,ADUpC,GCVuC,EAAE,IDUzC,IAAA,CAAoB,IAApB,EAAmC;ACVf,CAAT,CAAb,EDUsB,KAAA,IAAA,GAAA,IAAA;ACRtB,IAAI,ADMF,CCNG,EAAL,CAAQ,CDMN,MAAA,CCNF,EAAkB,ADMwB,EAAxC,UCNgB;EAChB,ADOuC,OCPhC,CAAC,GAAR,CAAY,UAAZ;AACD,CAFD;AAGA,EDOE,ECPE,CAAC,CDOH,CCPF,ADOE,CCPM,QAAR,ADOE,CAAA,CCPgB,EDOhB,GAAA,OCPgB,GDOZ,QAAJ,EAAoB;ECNpB,EDOE,KCPK,CAAC,CDOC,ECPT,CAAY,EDOE,IAAL,CAAU,GCPnB,KDOS,CAAP;ACNH,CAFD,CDSG,CAFD;ACJF,IAAI,CAAC,EAAL,CAAQ,OAAR,EAAiB,YAAA;EACf,ADOA,IAAA,CAAA,ECPO,CAAC,GAAR,CAAY,EDOZ,CAAA,GAAA,GCPA,ADOA,UAAI,MAAJ,EAAqB;ACNtB,CAFD,GDSI,MAAM,CAAC,MAAP,CAAc,KAAK,IAAnB,EAAyB,MAAzB;ACLJ,EDMG,CAFD,CCJE,CAAC,OAAL,CAAa,QAAb;AACA,IAAI,CAAC,OAAL,CAAa,OAAb;EDOE,IAAA,CAAA,SAAA,CAAA,EAAA,GAAA,UAAG,SAAH,EAAsB,QAAtB,EAAwC;IACtC,IAAM,QAAQ,GAAG,KAAK,MAAL,CAAY,SAAZ,KAA0B,EAA3C;IACA,QAAQ,CAAC,IAAT,CAAc,QAAd;IACA,KAAK,MAAL,CAAY,SAAZ,IAAyB,QAAzB;EACD,CAJD;;EAMA,IAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,SAAR,EAAyB;IACvB,IAAM,QAAQ,GAAG,KAAK,MAAL,CAAY,SAAZ,CAAjB;IACA,IAAI,CAAC,QAAD,IAAa,QAAQ,CAAC,MAAT,KAAoB,CAArC,EAAwC;IACxC,QAAQ,CAAC,OAAT,CAAiB,UAAC,QAAD,EAAS;MACxB,QAAQ;IACT,CAFD;EAGD,CAND;;EAOF,OAAA,IAAA;AA1BA,CAAA,EAAA;;AAAa,OAAA,CAAA,IAAA,GAAA,IAAA","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["interface UserProps {\n  name?: string;\n  age?: number;\n}\n\n// A type alias - saves us rewriting this type on each callback's type.\n// A function that returns nothing 'void'.\ntype Callback = () => void;\n\nexport class User {\n  events: { [key: string]: Callback[] } = {};\n\n  constructor(private data: UserProps) {}\n\n  get(propName: string): string | number {\n    return this.data[propName];\n  }\n\n  set(update: UserProps): void {\n    Object.assign(this.data, update);\n  }\n\n  on(eventName: string, callback: Callback): void {\n    const handlers = this.events[eventName] || [];\n    handlers.push(callback);\n    this.events[eventName] = handlers;\n  }\n\n  trigger(eventName: string): void {\n    const handlers = this.events[eventName];\n    if (!handlers || handlers.length === 0) return;\n    handlers.forEach((callback) => {\n      callback();\n    });\n  }\n}\n","import { User } from './models/User';\n\nconst user = new User({ name: 'name', age: 30 });\n\nuser.on('change', () => {\n  console.log('Change 1');\n});\nuser.on('change', () => {\n  console.log('Change 2');\n});\nuser.on('click', () => {\n  console.log('Click 1');\n});\n\nuser.trigger('change');\nuser.trigger('click');\n"]}